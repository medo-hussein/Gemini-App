<% const isArabic = lang === "ar"; %>
<!DOCTYPE html>
<html lang="<%= lang %>">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title><%= isArabic ? "Ù…Ø³Ø§Ø¹Ø¯ Gemini AI" : "Gemini AI Assistant" %></title>
  <link rel="stylesheet" href="/style.css" />
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap&subset=arabic" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/highlight.js@11.5.1/styles/default.min.css">
</head>
<body class="<%= isArabic ? 'rtl' : '' %>">
  <main class="wrapper <%= isArabic ? 'rtl' : '' %>">
    <div class="header">
      <h1><%= isArabic ? "Ù…Ø³Ø§Ø¹Ø¯ Gemini AI" : "Gemini AI Assistant" %></h1>
      <div class="controls">
        <button id="theme-toggle">ðŸŒ™</button>
        <button id="lang-toggle"><%= isArabic ? "English" : "Ø§Ù„Ø¹Ø±Ø¨ÙŠØ©" %></button>
      </div>
    </div>

    <form id="prompt-form" class="input-form">
      <input type="hidden" name="lang" value="<%= lang %>" />
      <textarea id="prompt" name="prompt" placeholder="<%= isArabic ? 'Ø§ÙƒØªØ¨ Ø³Ø¤Ø§Ù„Ùƒ Ù‡Ù†Ø§...' : 'Ask something smart or silly...' %>" required></textarea>
      <button type="submit"><%= isArabic ? "ðŸ’¬ Ø¥Ø±Ø³Ø§Ù„" : "ðŸ’¬ Generate" %></button>
    </form>

    <div id="response-box" class="response-box hidden">
      <h2><%= isArabic ? "Ø±Ø¯ Gemini:" : "Gemini's Response:" %></h2>
      <div id="response-text"></div>
      <button class="copy-btn">ðŸ“‹ <%= isArabic ? "Ù†Ø³Ø®" : "Copy" %></button>
      <button class="speak-btn">ðŸ”Š <%= isArabic ? "Ø§Ø³ØªÙ…Ø§Ø¹" : "Listen" %></button>
    </div>

    <div id="error-box" class="error"></div>
  </main>

  <script src="https://cdn.jsdelivr.net/npm/highlight.js@11.5.1/lib/core.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/highlight.js@11.5.1/lib/languages/javascript.min.js"></script>
  <script>
    hljs.registerLanguage('javascript', window.hljsDefineJavaScript);
    hljs.highlightAll();
  </script>

  <script>
    const themeToggle = document.getElementById("theme-toggle");
    const langToggle = document.getElementById("lang-toggle");
    const form = document.getElementById("prompt-form");
    const responseBox = document.getElementById("response-box");
    const responseText = document.getElementById("response-text");
    const errorBox = document.getElementById("error-box");
    const body = document.body;
    const promptInput = document.getElementById("prompt");

    promptInput.addEventListener("keydown", function (e) {
      if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault();
        form.requestSubmit();
      }
    });

    const savedTheme = localStorage.getItem("theme");
    if (savedTheme === "dark") {
      body.classList.add("dark");
      themeToggle.textContent = "ðŸŒž";
    }

    themeToggle.addEventListener("click", () => {
      body.classList.toggle("dark");
      const isDark = body.classList.contains("dark");
      themeToggle.textContent = isDark ? "ðŸŒž" : "ðŸŒ™";
      localStorage.setItem("theme", isDark ? "dark" : "light");
    });

    langToggle.addEventListener("click", () => {
      const newLang = "<%= lang %>" === "ar" ? "en" : "ar";
      window.location.href = `/?lang=${newLang}`;
    });

    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      const prompt = promptInput.value;
      const lang = "<%= lang %>";

      errorBox.textContent = "";
      responseBox.classList.remove("hidden");
      responseText.innerHTML = lang === "ar" ? "Ø¬Ø§Ø±ÙŠ ØªÙˆÙ„ÙŠØ¯ Ø§Ù„Ø±Ø¯..." : "Generating response...";

      const res = await fetch("/generate", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ prompt, lang })
      });

      if (!res.ok) {
        const err = await res.json();
        errorBox.textContent = err.error || "Error";
        return;
      }

      responseText.innerHTML = "";
      const reader = res.body.getReader();
      const decoder = new TextDecoder();
      let done = false;

      while (!done) {
        const { value, done: doneReading } = await reader.read();
        done = doneReading;
        const chunk = decoder.decode(value, { stream: true });
        const lines = chunk.split("\n\n");

        for (const line of lines) {
          if (line.startsWith("data: ")) {
            const data = line.replace("data: ", "");
            if (data === "[DONE]") {
              done = true;
              break;
            }
            responseText.innerHTML += data;
          }
        }
      }

      hljs.highlightAll();
    });

    document.querySelector('.copy-btn').addEventListener('click', () => {
      const text = document.querySelector('#response-text').innerText;
      navigator.clipboard.writeText(text).then(() => alert("ØªÙ… Ù†Ø³Ø® Ø§Ù„Ù†Øµ!"));
    });

    document.querySelector('.speak-btn').addEventListener('click', () => {
      const text = document.querySelector('#response-text').innerText;
      const utterance = new SpeechSynthesisUtterance(text);
      speechSynthesis.speak(utterance);
    });
  </script>
</body>
</html>
